{
  "version": "1.1.6",
  "modules": [
    {
      "id": 79,
      "plugin": "ImpromptuModular",
      "version": "1.1.8",
      "model": "Clocked",
      "params": [
        {
          "id": 0,
          "value": 256.0
        },
        {
          "id": 1,
          "value": 0.0
        },
        {
          "id": 2,
          "value": -5.0
        },
        {
          "id": 3,
          "value": -2.0
        },
        {
          "id": 4,
          "value": 0.0
        },
        {
          "id": 5,
          "value": 0.0239999685
        },
        {
          "id": 6,
          "value": 0.00299996976
        },
        {
          "id": 7,
          "value": 0.0
        },
        {
          "id": 8,
          "value": 0.5
        },
        {
          "id": 9,
          "value": 0.5
        },
        {
          "id": 10,
          "value": 0.5
        },
        {
          "id": 11,
          "value": 0.5
        },
        {
          "id": 12,
          "value": 0.0
        },
        {
          "id": 13,
          "value": 0.0
        },
        {
          "id": 14,
          "value": 0.0
        },
        {
          "id": 15,
          "value": 0.0
        },
        {
          "id": 16,
          "value": 0.0
        },
        {
          "id": 17,
          "value": 0.0
        },
        {
          "id": 18,
          "value": 0.0
        },
        {
          "id": 19,
          "value": 0.0
        }
      ],
      "leftModuleId": 860,
      "rightModuleId": 700,
      "data": {
        "panelTheme": 1,
        "running": false,
        "displayDelayNoteMode": true,
        "bpmDetectionMode": false,
        "resetOnStartStop": 0,
        "ppqn": 4,
        "resetClockOutputsHigh": false,
        "momentaryRunInput": true,
        "clockMaster": false
      },
      "pos": [
        17,
        0
      ]
    },
    {
      "id": 598,
      "plugin": "SubmarineFree",
      "version": "1.1.6",
      "model": "TD-202",
      "params": [],
      "leftModuleId": 599,
      "rightModuleId": 602,
      "data": {
        "text": "Output",
        "fg": "#ffa52d",
        "bg": "#00000000"
      },
      "pos": [
        49,
        0
      ]
    },
    {
      "id": 599,
      "plugin": "Core",
      "version": "1.1.6",
      "model": "AudioInterface",
      "params": [],
      "leftModuleId": 700,
      "rightModuleId": 598,
      "data": {
        "audio": {
          "driver": 5,
          "offset": 41,
          "maxChannels": 8,
          "sampleRate": 44100,
          "blockSize": 256
        }
      },
      "pos": [
        39,
        0
      ]
    },
    {
      "id": 600,
      "plugin": "SubmarineFree",
      "version": "1.1.6",
      "model": "TD-202",
      "params": [],
      "leftModuleId": 698,
      "data": {
        "text": "Final Mix",
        "fg": "#ffa52d",
        "bg": "#00000000"
      },
      "pos": [
        82,
        1
      ]
    },
    {
      "id": 601,
      "plugin": "SubmarineFree",
      "version": "1.1.6",
      "model": "TD-202",
      "params": [],
      "leftModuleId": 604,
      "rightModuleId": 864,
      "data": {
        "text": "Aux B - DLAY",
        "fg": "#0aff13",
        "bg": "#00000000"
      },
      "pos": [
        77,
        0
      ]
    },
    {
      "id": 602,
      "plugin": "Valley",
      "version": "1.0.1",
      "model": "Plateau",
      "params": [
        {
          "id": 0,
          "value": 1.0
        },
        {
          "id": 1,
          "value": 0.5
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 10.0
        },
        {
          "id": 4,
          "value": 10.0
        },
        {
          "id": 5,
          "value": 0.5
        },
        {
          "id": 6,
          "value": 10.0
        },
        {
          "id": 7,
          "value": 0.549950004
        },
        {
          "id": 8,
          "value": 10.0
        },
        {
          "id": 9,
          "value": 10.0
        },
        {
          "id": 10,
          "value": 0.0
        },
        {
          "id": 11,
          "value": 0.5
        },
        {
          "id": 12,
          "value": 0.5
        },
        {
          "id": 13,
          "value": 0.0
        },
        {
          "id": 14,
          "value": 0.0
        },
        {
          "id": 15,
          "value": 0.0
        },
        {
          "id": 16,
          "value": 0.0
        },
        {
          "id": 17,
          "value": 0.0
        },
        {
          "id": 18,
          "value": 0.0
        },
        {
          "id": 19,
          "value": 0.0
        },
        {
          "id": 20,
          "value": 0.0
        },
        {
          "id": 21,
          "value": 0.0
        },
        {
          "id": 22,
          "value": 0.0
        },
        {
          "id": 23,
          "value": 0.0
        },
        {
          "id": 24,
          "value": 0.0
        },
        {
          "id": 25,
          "value": 0.0
        },
        {
          "id": 26,
          "value": 0.0
        },
        {
          "id": 27,
          "value": 0.0
        },
        {
          "id": 28,
          "value": 0.0
        },
        {
          "id": 29,
          "value": 0.0
        },
        {
          "id": 30,
          "value": 1.0
        }
      ],
      "leftModuleId": 598,
      "rightModuleId": 603,
      "data": {
        "frozen": false,
        "freezeToggle": false,
        "panelStyle": 0,
        "tuned": 0,
        "diffuseInput": 1,
        "preDelayCVSens": 0,
        "inputSensitivity": 0,
        "outputSaturation": 0
      },
      "pos": [
        51,
        0
      ]
    },
    {
      "id": 603,
      "plugin": "SubmarineFree",
      "version": "1.1.6",
      "model": "TD-202",
      "params": [],
      "leftModuleId": 602,
      "rightModuleId": 604,
      "data": {
        "text": "Aux A - RVRB",
        "fg": "#0aff13",
        "bg": "#00000000"
      },
      "pos": [
        63,
        0
      ]
    },
    {
      "id": 604,
      "plugin": "AlrightDevices",
      "version": "1.0.3",
      "model": "Chronoblob2",
      "params": [
        {
          "id": 0,
          "value": 0.205500036
        },
        {
          "id": 1,
          "value": 0.548000216
        },
        {
          "id": 2,
          "value": 1.0
        },
        {
          "id": 3,
          "value": 0.0
        },
        {
          "id": 4,
          "value": -0.104999974
        },
        {
          "id": 5,
          "value": 0.110999994
        },
        {
          "id": 6,
          "value": 0.0
        },
        {
          "id": 7,
          "value": 0.0
        },
        {
          "id": 8,
          "value": 1.0
        },
        {
          "id": 9,
          "value": 0.0
        }
      ],
      "leftModuleId": 603,
      "rightModuleId": 601,
      "data": {
        "delay_mode": 1,
        "hold_behavior": 0,
        "sync_prescaler": 6
      },
      "pos": [
        65,
        0
      ]
    },
    {
      "id": 697,
      "plugin": "MindMeldModular",
      "version": "1.1.9",
      "model": "MixMasterJr",
      "params": [
        {
          "id": 0,
          "value": 0.562411547
        },
        {
          "id": 1,
          "value": 0.702262998
        },
        {
          "id": 2,
          "value": 1.0
        },
        {
          "id": 3,
          "value": 0.534362495
        },
        {
          "id": 4,
          "value": 1.0
        },
        {
          "id": 5,
          "value": 0.580445766
        },
        {
          "id": 6,
          "value": 0.890386701
        },
        {
          "id": 7,
          "value": 1.0
        },
        {
          "id": 8,
          "value": 1.0
        },
        {
          "id": 9,
          "value": 1.0
        },
        {
          "id": 10,
          "value": 0.5
        },
        {
          "id": 11,
          "value": 0.5
        },
        {
          "id": 12,
          "value": 0.5
        },
        {
          "id": 13,
          "value": 0.5
        },
        {
          "id": 14,
          "value": 0.5
        },
        {
          "id": 15,
          "value": 0.322999924
        },
        {
          "id": 16,
          "value": 0.5
        },
        {
          "id": 17,
          "value": 0.5
        },
        {
          "id": 18,
          "value": 0.5
        },
        {
          "id": 19,
          "value": 0.5
        },
        {
          "id": 20,
          "value": 0.0
        },
        {
          "id": 21,
          "value": 0.0
        },
        {
          "id": 22,
          "value": 0.0
        },
        {
          "id": 23,
          "value": 0.0
        },
        {
          "id": 24,
          "value": 0.0
        },
        {
          "id": 25,
          "value": 0.0
        },
        {
          "id": 26,
          "value": 0.0
        },
        {
          "id": 27,
          "value": 0.0
        },
        {
          "id": 28,
          "value": 0.0
        },
        {
          "id": 29,
          "value": 0.0
        },
        {
          "id": 30,
          "value": 1.0
        },
        {
          "id": 31,
          "value": 1.0
        },
        {
          "id": 32,
          "value": 1.0
        },
        {
          "id": 33,
          "value": 1.0
        },
        {
          "id": 34,
          "value": 1.0
        },
        {
          "id": 35,
          "value": 1.0
        },
        {
          "id": 36,
          "value": 1.0
        },
        {
          "id": 37,
          "value": 0.0
        },
        {
          "id": 38,
          "value": 0.0
        },
        {
          "id": 39,
          "value": 0.0
        },
        {
          "id": 40,
          "value": 1.0
        },
        {
          "id": 41,
          "value": 0.0
        },
        {
          "id": 42,
          "value": 0.0
        },
        {
          "id": 43,
          "value": 0.901726007
        },
        {
          "id": 44,
          "value": 0.0
        },
        {
          "id": 45,
          "value": 0.0
        },
        {
          "id": 46,
          "value": 0.0
        },
        {
          "id": 47,
          "value": 0.0
        },
        {
          "id": 48,
          "value": 0.0
        },
        {
          "id": 49,
          "value": 0.0
        },
        {
          "id": 50,
          "value": 0.0
        },
        {
          "id": 51,
          "value": 0.0
        },
        {
          "id": 52,
          "value": 118.609009
        },
        {
          "id": 53,
          "value": 307.126007
        },
        {
          "id": 54,
          "value": 13.0
        },
        {
          "id": 55,
          "value": 13.0
        },
        {
          "id": 56,
          "value": 13.0
        },
        {
          "id": 57,
          "value": 13.0
        },
        {
          "id": 58,
          "value": 13.0
        },
        {
          "id": 59,
          "value": 13.0
        },
        {
          "id": 60,
          "value": 8750.0
        },
        {
          "id": 61,
          "value": 20010.0
        },
        {
          "id": 62,
          "value": 7590.0
        },
        {
          "id": 63,
          "value": 20010.0
        },
        {
          "id": 64,
          "value": 20010.0
        },
        {
          "id": 65,
          "value": 20010.0
        },
        {
          "id": 66,
          "value": 20010.0
        },
        {
          "id": 67,
          "value": 20010.0
        },
        {
          "id": 68,
          "value": 13.0
        },
        {
          "id": 69,
          "value": 13.0
        },
        {
          "id": 70,
          "value": 20010.0
        },
        {
          "id": 71,
          "value": 20010.0
        }
      ],
      "leftModuleId": 833,
      "rightModuleId": 698,
      "data": {
        "trackLabels": "-01--02--03--04--05--06--07--08-GRP1GRP2",
        "panLawMono": 1,
        "panLawStereo": 1,
        "directOutsMode": 3,
        "directOutsSkipGroupedTracks": 0,
        "auxSendsMode": 3,
        "groupsControlTrackSendLevels": 0,
        "auxReturnsMutedWhenMainSolo": 0,
        "auxReturnsSolosMuteDry": 0,
        "chainMode": 1,
        "colorAndCloak": 117440512,
        "symmetricalFade": false,
        "fadeCvOutsWithVolCv": false,
        "linkBitMask": 0,
        "filterPos": 1,
        "groupedAuxReturnFeedbackProtection": 1,
        "ecoMode": 65535,
        "faders": [
          0.562411547,
          0.702262998,
          1.0,
          0.534362495,
          1.0,
          0.580445766,
          0.890386701,
          1.0,
          1.0,
          1.0
        ],
        "momentaryCvButtons": 1,
        "masterFaderScalesSends": 0,
        "linearVolCvInputs": 0,
        "id_t0_gainAdjust": 0.870963514,
        "id_t0_fadeRate": 0.0,
        "id_t0_fadeProfile": 0.0,
        "id_t0_directOutsMode": 3,
        "id_t0_auxSendsMode": 3,
        "id_t0_panLawStereo": 1,
        "id_t0_vuColorThemeLocal": 0,
        "id_t0_filterPos": 1,
        "id_t0_dispColorLocal": 0,
        "id_t0_polyStereo": 0,
        "id_t0_panCvLevel": 1.0,
        "id_t0_stereoWidth": 1.0,
        "id_t0_invertInput": 0,
        "id_t1_gainAdjust": 0.855066657,
        "id_t1_fadeRate": 0.0,
        "id_t1_fadeProfile": 0.0,
        "id_t1_directOutsMode": 3,
        "id_t1_auxSendsMode": 3,
        "id_t1_panLawStereo": 1,
        "id_t1_vuColorThemeLocal": 0,
        "id_t1_filterPos": 1,
        "id_t1_dispColorLocal": 0,
        "id_t1_polyStereo": 0,
        "id_t1_panCvLevel": 1.0,
        "id_t1_stereoWidth": 1.0,
        "id_t1_invertInput": 0,
        "id_t2_gainAdjust": 1.33659613,
        "id_t2_fadeRate": 0.0,
        "id_t2_fadeProfile": 0.0,
        "id_t2_directOutsMode": 3,
        "id_t2_auxSendsMode": 3,
        "id_t2_panLawStereo": 1,
        "id_t2_vuColorThemeLocal": 0,
        "id_t2_filterPos": 1,
        "id_t2_dispColorLocal": 0,
        "id_t2_polyStereo": 0,
        "id_t2_panCvLevel": 1.0,
        "id_t2_stereoWidth": 1.0,
        "id_t2_invertInput": 0,
        "id_t3_gainAdjust": 1.0,
        "id_t3_fadeRate": 0.0,
        "id_t3_fadeProfile": 0.0,
        "id_t3_directOutsMode": 3,
        "id_t3_auxSendsMode": 3,
        "id_t3_panLawStereo": 1,
        "id_t3_vuColorThemeLocal": 0,
        "id_t3_filterPos": 1,
        "id_t3_dispColorLocal": 0,
        "id_t3_polyStereo": 0,
        "id_t3_panCvLevel": 1.0,
        "id_t3_stereoWidth": 1.0,
        "id_t3_invertInput": 0,
        "id_t4_gainAdjust": 1.0,
        "id_t4_fadeRate": 0.0,
        "id_t4_fadeProfile": 0.0,
        "id_t4_directOutsMode": 3,
        "id_t4_auxSendsMode": 3,
        "id_t4_panLawStereo": 1,
        "id_t4_vuColorThemeLocal": 0,
        "id_t4_filterPos": 1,
        "id_t4_dispColorLocal": 0,
        "id_t4_polyStereo": 0,
        "id_t4_panCvLevel": 1.0,
        "id_t4_stereoWidth": 1.0,
        "id_t4_invertInput": 0,
        "id_t5_gainAdjust": 1.0,
        "id_t5_fadeRate": 0.0,
        "id_t5_fadeProfile": 0.0,
        "id_t5_directOutsMode": 3,
        "id_t5_auxSendsMode": 3,
        "id_t5_panLawStereo": 1,
        "id_t5_vuColorThemeLocal": 0,
        "id_t5_filterPos": 1,
        "id_t5_dispColorLocal": 0,
        "id_t5_polyStereo": 0,
        "id_t5_panCvLevel": 1.0,
        "id_t5_stereoWidth": 1.0,
        "id_t5_invertInput": 0,
        "id_t6_gainAdjust": 1.0,
        "id_t6_fadeRate": 0.0,
        "id_t6_fadeProfile": 0.0,
        "id_t6_directOutsMode": 3,
        "id_t6_auxSendsMode": 3,
        "id_t6_panLawStereo": 1,
        "id_t6_vuColorThemeLocal": 0,
        "id_t6_filterPos": 1,
        "id_t6_dispColorLocal": 0,
        "id_t6_polyStereo": 0,
        "id_t6_panCvLevel": 1.0,
        "id_t6_stereoWidth": 1.0,
        "id_t6_invertInput": 0,
        "id_t7_gainAdjust": 1.0,
        "id_t7_fadeRate": 0.0,
        "id_t7_fadeProfile": 0.0,
        "id_t7_directOutsMode": 3,
        "id_t7_auxSendsMode": 3,
        "id_t7_panLawStereo": 1,
        "id_t7_vuColorThemeLocal": 0,
        "id_t7_filterPos": 1,
        "id_t7_dispColorLocal": 0,
        "id_t7_polyStereo": 0,
        "id_t7_panCvLevel": 1.0,
        "id_t7_stereoWidth": 1.0,
        "id_t7_invertInput": 0,
        "id_g0_fadeRate": 0.0,
        "id_g0_fadeProfile": 0.0,
        "id_g0_directOutsMode": 3,
        "id_g0_auxSendsMode": 3,
        "id_g0_panLawStereo": 1,
        "id_g0_vuColorThemeLocal": 0,
        "id_g0_filterPos": 1,
        "id_g0_dispColorLocal": 0,
        "id_g0_panCvLevel": 1.0,
        "id_g0_stereoWidth": 1.0,
        "id_g1_fadeRate": 0.0,
        "id_g1_fadeProfile": 0.0,
        "id_g1_directOutsMode": 3,
        "id_g1_auxSendsMode": 3,
        "id_g1_panLawStereo": 1,
        "id_g1_vuColorThemeLocal": 0,
        "id_g1_filterPos": 1,
        "id_g1_dispColorLocal": 0,
        "id_g1_panCvLevel": 1.0,
        "id_g1_stereoWidth": 1.0,
        "dcBlock": false,
        "clipping": 0,
        "fadeRate": 0.0,
        "fadeProfile": 0.0,
        "vuColorThemeLocal": 0,
        "dispColorLocal": 0,
        "dimGain": 0.251190007,
        "masterLabel": "MASTER"
      },
      "pos": [
        16,
        1
      ]
    },
    {
      "id": 698,
      "plugin": "MindMeldModular",
      "version": "1.1.9",
      "model": "AuxExpanderJr",
      "params": [
        {
          "id": 0,
          "value": 0.410999984
        },
        {
          "id": 1,
          "value": 0.69449985
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.0
        },
        {
          "id": 4,
          "value": 0.375000119
        },
        {
          "id": 5,
          "value": 0.709500074
        },
        {
          "id": 6,
          "value": 0.0
        },
        {
          "id": 7,
          "value": 0.0
        },
        {
          "id": 8,
          "value": 0.112500042
        },
        {
          "id": 9,
          "value": 0.0
        },
        {
          "id": 10,
          "value": 0.0
        },
        {
          "id": 11,
          "value": 0.0
        },
        {
          "id": 12,
          "value": 0.757000089
        },
        {
          "id": 13,
          "value": 0.757500052
        },
        {
          "id": 14,
          "value": 0.0
        },
        {
          "id": 15,
          "value": 0.0
        },
        {
          "id": 16,
          "value": 0.77700001
        },
        {
          "id": 17,
          "value": 0.644499838
        },
        {
          "id": 18,
          "value": 0.0
        },
        {
          "id": 19,
          "value": 0.0
        },
        {
          "id": 20,
          "value": 0.592499971
        },
        {
          "id": 21,
          "value": 0.0
        },
        {
          "id": 22,
          "value": 0.0
        },
        {
          "id": 23,
          "value": 0.0
        },
        {
          "id": 24,
          "value": 0.501000047
        },
        {
          "id": 25,
          "value": 0.608999968
        },
        {
          "id": 26,
          "value": 0.0
        },
        {
          "id": 27,
          "value": 0.0
        },
        {
          "id": 28,
          "value": 0.0
        },
        {
          "id": 29,
          "value": 0.0
        },
        {
          "id": 30,
          "value": 0.0
        },
        {
          "id": 31,
          "value": 0.0
        },
        {
          "id": 32,
          "value": 0.0
        },
        {
          "id": 33,
          "value": 0.0
        },
        {
          "id": 34,
          "value": 0.0
        },
        {
          "id": 35,
          "value": 0.0
        },
        {
          "id": 36,
          "value": 0.0
        },
        {
          "id": 37,
          "value": 0.0
        },
        {
          "id": 38,
          "value": 0.0
        },
        {
          "id": 39,
          "value": 0.0
        },
        {
          "id": 40,
          "value": 0.0
        },
        {
          "id": 41,
          "value": 0.0
        },
        {
          "id": 42,
          "value": 0.0
        },
        {
          "id": 43,
          "value": 0.0
        },
        {
          "id": 44,
          "value": 0.0
        },
        {
          "id": 45,
          "value": 0.0
        },
        {
          "id": 46,
          "value": 0.0
        },
        {
          "id": 47,
          "value": 0.0
        },
        {
          "id": 48,
          "value": 0.0
        },
        {
          "id": 49,
          "value": 0.0
        },
        {
          "id": 50,
          "value": 0.0
        },
        {
          "id": 51,
          "value": 0.0
        },
        {
          "id": 52,
          "value": 0.0
        },
        {
          "id": 53,
          "value": 0.0
        },
        {
          "id": 54,
          "value": 0.0
        },
        {
          "id": 55,
          "value": 0.0
        },
        {
          "id": 56,
          "value": 0.0
        },
        {
          "id": 57,
          "value": 0.0
        },
        {
          "id": 58,
          "value": 0.0
        },
        {
          "id": 59,
          "value": 0.0
        },
        {
          "id": 60,
          "value": 0.0
        },
        {
          "id": 61,
          "value": 0.0
        },
        {
          "id": 62,
          "value": 1.0
        },
        {
          "id": 63,
          "value": 1.0
        },
        {
          "id": 64,
          "value": 1.0
        },
        {
          "id": 65,
          "value": 1.0
        },
        {
          "id": 66,
          "value": 0.586999774
        },
        {
          "id": 67,
          "value": 0.370999932
        },
        {
          "id": 68,
          "value": 0.5
        },
        {
          "id": 69,
          "value": 0.5
        },
        {
          "id": 70,
          "value": 1.0
        },
        {
          "id": 71,
          "value": 0.992440462
        },
        {
          "id": 72,
          "value": 1.0
        },
        {
          "id": 73,
          "value": 1.0
        }
      ],
      "leftModuleId": 697,
      "rightModuleId": 600,
      "data": {
        "directOutsModeLocal": 50529027,
        "panLawStereoLocal": 16843009,
        "vuColorThemeLocal": 0,
        "dispColorAuxLocal": [
          0,
          0,
          0,
          0
        ],
        "auxFadeRatesAndProfiles": [
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0
        ],
        "auxLabels": "RVRBDELYauxCauxD",
        "id_x0_hpfCutoffFreq": 13.0,
        "id_x0_lpfCutoffFreq": 20010.0,
        "id_x0_stereoWidth": 1.0,
        "id_x1_hpfCutoffFreq": 13.0,
        "id_x1_lpfCutoffFreq": 20010.0,
        "id_x1_stereoWidth": 1.0,
        "id_x2_hpfCutoffFreq": 13.0,
        "id_x2_lpfCutoffFreq": 20010.0,
        "id_x2_stereoWidth": 1.0,
        "id_x3_hpfCutoffFreq": 13.0,
        "id_x3_lpfCutoffFreq": 20010.0,
        "id_x3_stereoWidth": 1.0,
        "panCvLevels": [
          1.0,
          1.0,
          1.0,
          1.0
        ]
      },
      "pos": [
        52,
        1
      ]
    },
    {
      "id": 700,
      "plugin": "SubmarineFree",
      "version": "1.1.6",
      "model": "TD-202",
      "params": [],
      "leftModuleId": 79,
      "rightModuleId": 599,
      "data": {
        "text": "Master Clock",
        "fg": "#ffa52d",
        "bg": "#00000000"
      },
      "pos": [
        37,
        0
      ]
    },
    {
      "id": 831,
      "plugin": "VCV-Prototype",
      "version": "1.3.0",
      "model": "Prototype",
      "params": [
        {
          "id": 0,
          "value": 0.543000162
        },
        {
          "id": 1,
          "value": 0.280499548
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.21450001
        },
        {
          "id": 4,
          "value": 0.665500164
        },
        {
          "id": 5,
          "value": 0.0224997867
        },
        {
          "id": 6,
          "value": 0.0
        },
        {
          "id": 7,
          "value": 0.0
        },
        {
          "id": 8,
          "value": 0.0
        },
        {
          "id": 9,
          "value": 0.0
        },
        {
          "id": 10,
          "value": 0.0
        },
        {
          "id": 11,
          "value": 0.0
        }
      ],
      "rightModuleId": 840,
      "data": {
        "path": "/Users/paulpomeroy/Local Documents/music production/VCV Module Designs/thatRhythmThing/tHaT-rHYthM-tHiNG.js",
        "script": "// tHaT-rHYthM-tHiNG.js © 2020 Paul Pomeroy\n// This work is licensed under a GNU General Public License v3.0 or later License. (https://spdx.org/licenses/GPL-3.0-or-later.html)\n// This code is designed to run in the VCV PROTOTYPE module. (https://vcvrack.com/Prototype#manual) \n\n//PROTOTYPE settings\nconfig.frameDivider = 32;\nconfig.bufferSize = 0;\n\n//variable declarations and inits\n\nvar initialized = false;\n\n//track and segment pointers\nconst _trk1=0, _trk2=1;\nconst _seg1=2, _seg2=3, _seg3=4, _seg4=5;\n\nconst _kTrk1Pattern = 0, _kTrk2Pattern = 1, _kReps = 3, _kMode = 4, _kSegment = 5;\n// Actual Value, Last Actual Value, Face Value, Last Face Value\nvar kTrk1PatternA, kTrk1PatternLA, kTrk1PatternF, kTrk1PatternLF;\nvar kTrk2PatternA, kTrk2PatternLA, kTrk2PatternF, kTrk2PatternLF;\n\nvar kRepsA, kRepsLA, kRepsF, kRepsLF;\nvar kSegmentA, kSegmentLA, kSegmentF, kSegmentLF;\n\nvar kModeA, kModeLA, kModeF, kModeLF;\nconst modeText = ['Stopped/Edit OK','Stopped/No Edit','Running/No Edit','Running/Edit OK'];\nconst _editDisabledMsg = 'Use K5 to enable Edit Mode.';\nvar editAllowed = false;\n\nconst _knobRate = 500, _switchRate = 175;\nvar kProcessCount, sProcessCount; \n\nvar kRepsCount, workingRepsCount; // Rep# knob\n\nconst _outTrack1 = 0;\nconst _outTrack2 = 1;\nconst _outEOC = 5;\n\nconst _inClock = 0;\nconst _inReset = 1;\n\nconst _inputFloor = 4.5;\nconst _inputCeiling = 7.0;\n\nvar clockIsHigh = false;\nvar resetIsHigh = false;\n\nconst _triggerValue = 10.0;\n\nvar playpositionTrack1, playpositionTrack2;\n\nvar t=true, f=false; // in the playback of the Patterns, t issues a trigger, f does not.\n\nconst patternSet1=[ // TRACK 1\n      [t,f,f,f,f,f, f,f,f,f,f,f,' 0: o----- ------'], // for testing \n      [t,f,f,f,t,f, f,f,t,f,f,f,' 1: o---o- --o---'], // on the 1s (4/4) *\n      [t,f,f,t,f,f, t,f,f,t,f,f,' 5: o--o-- o--o--'], // on the 1s (3/4) *\n      [f,t,f,f,f,t, f,f,f,t,f,f,' 2: -o---o ---o--'], // on the 2s (4/4)\n      [t,f,t,f,t,f, t,f,t,f,t,f,' 3: o-o-o- o-o-o-'], // on the 1s & 3s (4/4) \n      [f,t,f,t,f,t, f,t,f,t,f,t,' 4: -o-o-o -o-o-o'], // on the 2s & 4s (4/4)\n      [t,f,t,f,t,t, f,t,f,t,f,t,' 6: o-o-oo -o-o-o'], // std. bell pattern\n      [t,f,t,f,t,t, f,t,t,f,t,f,' 7: o-o-oo -oo-o-'], // bell pattern\n      [t,t,f,t,t,f, t,f,t,t,f,t,' 8: oo-oo- o-oo-o'], // bell pattern\n      [f,t,t,f,t,f, f,t,f,t,t,t,' 9: -oo-o- -o-ooo'], // reverse of Reich pattern\n      [t,t,t,f,t,f, f,t,f,t,t,f,'10: ooo-o- -o-oo-'], // Reich pattern *\n      [t,f,t,f,t,f, t,t,f,t,f,t,'11: o-o-o- oo-o-o']  // flipped std. bell\n  ];\nconst patternSet2=[ // TRACK 2\n      [t,f,f,f,f,f, f,f,f,f,f,t,' 0: o----- -----o'], // for testing \n      [t,f,f,f,t,f, f,f,t,f,f,f,' 1: o---o- --o---'], // on the 1s (4/4) *\n      [t,f,f,t,f,f, t,f,f,t,f,f,' 2: o--o-- o--o--'], // on the 1s (3/4) *\n      [t,f,t,f,f,f, t,f,t,f,f,t,' 3: o-o--- o-o--o'], \n      [f,f,t,t,f,f, f,t,f,f,t,t,' 4: --oo-- -o--oo'], \n      [f,t,t,f,t,f, t,f,f,f,t,f,' 5: -oo-o- o---o-'], // primes'], \n      [t,f,t,f,t,t, f,t,f,t,f,f,' 6: o-o-oo -o-o--'], // inverse of standard bell\n      [t,f,t,f,t,f, t,t,f,t,f,t,' 7: o-o-o- oo-o-o'], // reverse of standard bell\n      [t,f,t,f,t,f, f,t,f,t,f,f,' 8: o-o-o- -o-o--'], // divisive rhythm pattern\n      [t,t,f,f,t,f, t,f,f,t,t,f,' 9: oo--o- o--oo-'], \n      [t,t,t,f,t,f, f,t,f,t,t,f,'10: ooo-o- -o-oo-'], // Reich pattern *\n      [t,f,f,t,f,t, t,f,f,t,f,f,'11: o--o-o o--o--']  // 3/4 feel']  \n  ];\nconst _patternCount = 12;\nconst livePattern=[]; // holds references to the two selected patterns\n\nconst _repsCount = 8;\nconst _modeCount = 4\nconst _segmentsCount = 4;\n\nconst _seqLength = 11; // zero-based\n\nvar segmentColors=[[0.0,0.0,0.6],[0.0,0.6,0.6],[0.6,0.6,0.0],[0.6,0.1,0.4]];\n\nconst displayLines = [];\nconst _l1 = 0, _l2 = 1, _l3 = 2;\n\n// ******\n// FUNCTIONS\n// ******\n\nfunction setDisplayLine(l,txt) {\n  displayLines[l] = txt;\n}\n\nfunction buildDisplayLine(l) {\n  let txt = '';\n  switch (l) {\n    case 1:\n      setDisplayLine(0,'Mode: '+modeText[kModeF-1]+' Reps('+kRepsF+')');\n      break;\n    case 2:\n      txt = 'Seg.: ';\n      for (let x=1;x<5;x++) {\n        if (kSegmentF == x) txt += 'oooooo'; else\n          txt += '......';\n        if (x==2) txt += ' ';\n      }\n      setDisplayLine(1,txt);\n      break;\n    case 3:\n      setDisplayLine(2,'');\n      break;\n    default:\n      for (let l=1;l<4;l++) {setDisplayLine(l,'')};\n }\n}\n  \nfunction updateDisplay(reset) {\n  if (reset) {\n    for (let l=0;l<3;l++) {buildDisplayLine(l)}\n  }\n  let txt = displayLines.join('\\n');\n  display(txt);\n}\n\n// -*-*-*\n// Change an indicator light\n// -*-*-*\nfunction setIndicatorLight(sw,r,g,b) {\n  block.lights[sw][0] = r;\n  block.lights[sw][1] = g;\n  block.lights[sw][2] = b;\n}\n\n// -*-*-*\n// Advances play positions and returns true if trk 1 is back to start of sequence \n// -*-*-*\nfunction advancePlayPositions() {\n  if (++playpositionTrack2 > _seqLength)\n    playpositionTrack2 = 0;\n  if (++playpositionTrack1 > _seqLength) {\n    playpositionTrack1 = 0;\n  }\n}\n\n// -*-*-*\n// EOC is when playpositionTrack1 is at the end of the sequence AND \n// the end of the requested # of repeats. The EOC trigger is sent \n// after the last step of the cycle is processed and BEFORE the first\n// step of the new cycle. THIS IS ALSO WHERE TRACK 2 GETS SHIFTED AHEAD.\n// -*-*-*\nfunction handleEOC() {\n  if (playpositionTrack1 == _seqLength) { \n    if (kRepsCount == workingRepsCount) { // EOC\n      if (++playpositionTrack2 > _seqLength) // EOC advance for Track 2\n        playpositionTrack2 = 0;\n      block.outputs[_outEOC][0] = _triggerValue;\n      kRepsCount = 1;\n      if (workingRepsCount != kRepsF) {\n        workingRepsCount = kRepsF;\n        resetVariables(); // they changed the reps count\n      }\n    } else\n    ++kRepsCount;\n  }\n}\n\n// -*-*-*\n// Initialize variables and GUI\n// -*-*-*\nfunction guiInit() {\n  \n  kTrk1PatternA  = block.knobs[_kTrk1Pattern];\n  kTrk1PatternLA = 0.5;\n  kTrk1PatternF  = 1;\n  kTrk1PatternLF = 1;\n   \n  kTrk2PatternA  = block.knobs[_kTrk2Pattern];\n  kTrk2PatternLA = 0.5;\n  kTrk2PatternF  = 1;\n  kTrk2PatternLF = 1;\n\n  kSegmentA  = block.knobs[_kSegment];\n  kSegmentLA = 0;\n  kSegmentF  = 1;\n  kSegmentLF = 1;\n\n  kRepsA  = block.knobs[_kReps];\n  kRepsLA = 0.00;\n  kRepsLF = 0;\n  kRepsF = Math.trunc((kRepsA) * 8) + 1;\n  kRepsF = (kRepsF>8) ? 8 : kRepsF;\n  workingRepsCount = kRepsF;\n\n  kModeA  = block.knobs[_kMode]; \n  kModeLA = 0.625;\n  kModeF  = 3;\n  kModeLF = 3;\n  \n  setIndicatorLight(_seg1,1.0,1.0,0.0); // segment 1 displayed\n  \n  block.knobs[2] = 0.0; // not used\n  \n  resetVariables();\n  kProcessCount = 500; // force immediate sync with actual values of knobs \n  \n  updateDisplay(true);\n  \n  initialized = true;\n} // end of guiInit()\n\nfunction loadPattern(t,p) {\n  livePattern[t] = (t==_trk1) ? patternSet1[p] : patternSet2[p];\n  setDisplayLine(_l3,livePattern[t][12]); updateDisplay(false);\n  if (t==_trk1 && kSegmentF > 2) return;\n  if (t==_trk2 && kSegmentF < 3) return;\n  let offset = (!(kSegmentF & 1)) ? 6 : 0;\n  for (let x=0;x<6;x++) {\n    if (livePattern[t][x+offset]) {\n      for (let c=0;c<3;c++) {\n        block.switchLights[x][c] = segmentColors[(kSegmentF-1)][c];\n      }\n    } else {\n      for (let c=0;c<3;c++) {\n        block.switchLights[x][c] = 0.0;\n      }\n    }\n  }\n}\n// -*-*-*\n// Initialize variables and GUI\n// -*-*-*\nfunction resetVariables() {\n  kRepsCount = 1;\n  playpositionTrack1 = -1;\n  playpositionTrack2 = -1;\n  kProcessCount = 0; \n  sProcessCount = 0; \n  clockIsHigh = false;  \n  resetIsHigh = false;\n}\n\n// ============================================================\n// PROTOTYPE MAIN PROCESS\n// ============================================================\nfunction process(block) {\n  if (!initialized) guiInit();\n  \n// \n// process clock and reset pulses every cycle\n// \n  processInputs: {\n    // ------\n    // Process Reset signal\n    // ------\n    let RESET = block.inputs[_inReset];\n    if (resetIsHigh) {\n      if (RESET < _inputCeiling) \n        resetVariables(); // will set resetIsHigh to false\n    }\n    else { // reset was not high\n      if (RESET > _inputFloor)\n        resetIsHigh = true;\n    }\n    // ------\n    // Process Clock pulse\n    // ------\n    let CLOCK = block.inputs[_inClock];\n    if ((kModeF > 2) && !clockIsHigh && (CLOCK > _inputFloor)) {\n      clockIsHigh = true; // clock pulse turned high\n      \n      advancePlayPositions();\n      \n      sendOutputs: {\n        // Track 1\n        let out = (livePattern[_trk1][playpositionTrack1]) ? _triggerValue : 0;\n        block.outputs[_outTrack1][0] = out;\n        if (out==_triggerValue) \n          setIndicatorLight(_outTrack1,0.0,1.0,1.0);\n        else\n          setIndicatorLight(_outTrack1,0.0,0.0,0.0);\n        // Track 2\n        out = (livePattern[_trk2][playpositionTrack2]) ? _triggerValue : 0;\n        block.outputs[_outTrack2][0] = out;\n        if (out==_triggerValue) \n          setIndicatorLight(_outTrack2,0.0,1.0,1.0);\n        else\n          setIndicatorLight(_outTrack2,0.0,0.0,0.0);\n      }\n      handleEOC(); // will send EOC trigger and bump playpositionTrack2\n    } \n    else   \n    if (clockIsHigh && CLOCK < _inputCeiling) {\n      clockIsHigh = false; // clock pulse turned low\n      block.outputs[_outTrack1][0] = 0;\n      block.outputs[_outTrack2][0] = 0;\n      block.outputs[_outEOC][0] = 0;\n      setIndicatorLight(_outTrack1,0.0,0.0,0.0);\n      setIndicatorLight(_outTrack2,0.0,0.0,0.0);\n    }\n    // ------\n    // process switch clicks once every _switchRate cycles\n    // ------\n    checkSwitches: if (++sProcessCount > _switchRate) {\n      sProcessCount = 0;\n      for (let s=0;s<6;s++) {\n        let trk, offset;\n        if (block.switches[s]) { // they're pressing this switch\n          if (!editAllowed) {\n            setDisplayLine(2,_editDisabledMsg);\n            updateDisplay(false);\n            break checkSwitches;\n          }\n          if (kSegmentA <= 0.15) {\n            trk = 0; offset=0;\n          } else \n          if (kSegmentA <= 0.3) {\n            trk = 0; offset=6;\n          } else \n          if (kSegmentA <= 0.45) {\n            trk = 1; offset=0;\n          } else {\n            trk = 1; offset=6;\n          }\n          offset += s;\n          livePattern[trk][offset] = !livePattern[trk][offset]; // toggle it\n          if (livePattern[trk][offset]) {\n            for (let c=0;c<3;c++) {\n              block.switchLights[s][c] = segmentColors[kSegmentF-1][c]; // turn it on\n            }\n          } else\n          for (let c=0;c<3;c++) {\n            block.switchLights[s][c] = 0; // turn ot off\n          }\n          sProcessCount -=200; // slow down the next process \n          break checkSwitches; // only one switch pressed at a time\n        }\n      }\n    }\n    // ------\n    // process knob changes once every _knobRate cycles\n    // ------\n    if (++kProcessCount > _knobRate) { \n      kProcessCount = 0;\n\n      kTrk1PatternA = block.knobs[_kTrk1Pattern];\n      if (kTrk1PatternA != kTrk1PatternLA) {\n        kTrk1PatternLA = kTrk1PatternA;\n        kTrk1PatternF = Math.trunc((kTrk1PatternA) * _patternCount) + 1;\n        kTrk1PatternF = (kTrk1PatternF>_patternCount) ? _patternCount : kTrk1PatternF;\n        if (kTrk1PatternF != kTrk1PatternLF) {\n          loadPattern(_trk1,(kTrk1PatternF-1));\n          kTrk1PatternLF = kTrk1PatternF;\n        }\n      }\n\n      kTrk2PatternA = block.knobs[_kTrk2Pattern];\n      if (kTrk2PatternA != kTrk2PatternLA) {\n        kTrk2PatternLA = kTrk2PatternA;\n        kTrk2PatternF = Math.trunc((kTrk2PatternA) * _patternCount) + 1;\n        kTrk2PatternF = (kTrk2PatternF>_patternCount) ? _patternCount : kTrk2PatternF;\n        if (kTrk2PatternF != kTrk2PatternLF) {\n          loadPattern(_trk2,(kTrk2PatternF-1));\n          kTrk2PatternLF = kTrk2PatternF;\n        }\n      }\n\n      kModeA = block.knobs[_kMode];\n      if (kModeA != kModeLA) {\n         kModeLA = kModeA;\n        kModeF = Math.trunc((kModeA) * _modeCount) + 1;\n        kModeF = (kModeF>4) ? _modeCount : kModeF;\n        editAllowed = (kModeF == 1 || kModeF == _modeCount);\n        if (kModeF != kModeLF) {\n          updateDisplay(true);\n          kModeLF = kModeF;\n        }\n        let r, g, b;\n        for (let i=2;i<6;i++) {\n          r = 0.0; g = 0.0; b = 0.0;\n          if (i==2) {\n            if (kModeF < 3) r = 1.0; else g = 1.0;\n          } else\n          if (i==3) {\n            if (!editAllowed) {\n              g=0.0;r=0.8;b=0.3;\n            } else {\n              g=0.8;r=1.0;b=0.0;\n            }\n          }\n          setIndicatorLight(i,r,g,b);\n        }\n      }\n\n      kRepsA = block.knobs[_kReps];\n      if (kRepsA != kRepsLA) {\n         kRepsLA = kRepsA;\n        kRepsF = Math.trunc((kRepsA) * _repsCount) + 1;\n        kRepsF = (kRepsF>_repsCount) ? _repsCount : kRepsF;\n        if (kRepsF != kRepsLF) {\n          updateDisplay(true);\n          kRepsLF = kRepsF;\n        }\n      }\n\n      kSegmentA = block.knobs[_kSegment];\n      if (kSegmentA != kSegmentLA) {\n        kSegmentF = Math.trunc((kSegmentA) * 7) + 1;\n        kSegmentF = (kSegmentF>4) ? 4 : kSegmentF;\n        kSegmentLA = kSegmentA;\n\n        updateDisplay(true);\n\n        for (let x=2;x<6;x++) {\n          if (x-1<=kSegmentF) \n            setIndicatorLight(x,1.0,1.0,0.0);\n          else \n            setIndicatorLight(x,0.0,0.0,0.0);\n        }\n        let t = (kSegmentF < 3) ? _trk1 : _trk2;\n        let offset = (!(kSegmentF & 1)) ? 6 : 0;\n//console.log('Segment:'+kSegmentF+', track='+t+', offset='+offset); console.log(livePattern);\n        if (kSegmentF != kSegmentLF) {\n          for (let x=0;x<6;x++) {\n            if (livePattern[t][x+offset]) {\n              for (let c=0;c<3;c++) {\n                block.switchLights[x][c] = segmentColors[(kSegmentF-1)][c];\n              }\n            } else {\n              for (let c=0;c<3;c++) {\n                block.switchLights[x][c] = 0.0;\n              }\n            }\n          }\n          kSegmentLF = kSegmentF;\n        }\n      }\n    }\n  }\n}"
      },
      "pos": [
        0,
        2
      ]
    },
    {
      "id": 833,
      "plugin": "Autodafe-DrumKit",
      "version": "1.0.0",
      "model": "DrumsKick",
      "params": [
        {
          "id": 0,
          "value": 0.0
        }
      ],
      "leftModuleId": 835,
      "rightModuleId": 697,
      "data": {
        "sampletype": 6
      },
      "pos": [
        12,
        1
      ]
    },
    {
      "id": 834,
      "plugin": "Autodafe-DrumKit",
      "version": "1.0.0",
      "model": "DrumsClaps",
      "params": [
        {
          "id": 0,
          "value": 0.0
        }
      ],
      "leftModuleId": 839,
      "rightModuleId": 835,
      "data": {
        "sampletype": 6
      },
      "pos": [
        4,
        1
      ]
    },
    {
      "id": 835,
      "plugin": "Autodafe-DrumKit",
      "version": "1.0.0",
      "model": "DrumsClaps",
      "params": [
        {
          "id": 0,
          "value": 0.0
        }
      ],
      "leftModuleId": 834,
      "rightModuleId": 833,
      "data": {
        "sampletype": 6
      },
      "pos": [
        8,
        1
      ]
    },
    {
      "id": 837,
      "plugin": "Fundamental",
      "version": "1.4.0",
      "model": "Scope",
      "params": [
        {
          "id": 0,
          "value": -1.0
        },
        {
          "id": 1,
          "value": -10.0
        },
        {
          "id": 2,
          "value": -1.0
        },
        {
          "id": 3,
          "value": 0.900000095
        },
        {
          "id": 4,
          "value": 6.0
        },
        {
          "id": 5,
          "value": 0.0
        },
        {
          "id": 6,
          "value": 0.0
        },
        {
          "id": 7,
          "value": 0.0
        }
      ],
      "rightModuleId": 853,
      "data": {
        "lissajous": 0,
        "external": 0
      },
      "pos": [
        16,
        3
      ]
    },
    {
      "id": 839,
      "plugin": "Autodafe-DrumKit",
      "version": "1.0.0",
      "model": "DrumsRimClaves",
      "params": [
        {
          "id": 0,
          "value": 0.0
        }
      ],
      "rightModuleId": 834,
      "data": {
        "sampletype": 6
      },
      "pos": [
        0,
        1
      ]
    },
    {
      "id": 840,
      "plugin": "VCV-Prototype",
      "version": "1.3.0",
      "model": "Prototype",
      "params": [
        {
          "id": 0,
          "value": 0.847000003
        },
        {
          "id": 1,
          "value": 0.901499927
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.299999803
        },
        {
          "id": 4,
          "value": 0.672999799
        },
        {
          "id": 5,
          "value": 0.0269997846
        },
        {
          "id": 6,
          "value": 0.0
        },
        {
          "id": 7,
          "value": 0.0
        },
        {
          "id": 8,
          "value": 0.0
        },
        {
          "id": 9,
          "value": 0.0
        },
        {
          "id": 10,
          "value": 0.0
        },
        {
          "id": 11,
          "value": 0.0
        }
      ],
      "leftModuleId": 831,
      "rightModuleId": 867,
      "data": {
        "path": "/Users/paulpomeroy/Local Documents/music production/VCV Module Designs/thatRhythmThing/tHaT-rHYthM-tHiNG.js",
        "script": "// tHaT-rHYthM-tHiNG.js © 2020 Paul Pomeroy\n// This work is licensed under a GNU General Public License v3.0 or later License. (https://spdx.org/licenses/GPL-3.0-or-later.html)\n// This code is designed to run in the VCV PROTOTYPE module. (https://vcvrack.com/Prototype#manual) \n\n//PROTOTYPE settings\nconfig.frameDivider = 32;\nconfig.bufferSize = 0;\n\n//variable declarations and inits\n\nvar initialized = false;\n\n//track and segment pointers\nconst _trk1=0, _trk2=1;\nconst _seg1=2, _seg2=3, _seg3=4, _seg4=5;\n\nconst _kTrk1Pattern = 0, _kTrk2Pattern = 1, _kReps = 3, _kMode = 4, _kSegment = 5;\n// Actual Value, Last Actual Value, Face Value, Last Face Value\nvar kTrk1PatternA, kTrk1PatternLA, kTrk1PatternF, kTrk1PatternLF;\nvar kTrk2PatternA, kTrk2PatternLA, kTrk2PatternF, kTrk2PatternLF;\n\nvar kRepsA, kRepsLA, kRepsF, kRepsLF;\nvar kSegmentA, kSegmentLA, kSegmentF, kSegmentLF;\n\nvar kModeA, kModeLA, kModeF, kModeLF;\nconst modeText = ['Stopped/Edit OK','Stopped/No Edit','Running/No Edit','Running/Edit OK'];\nconst _editDisabledMsg = 'Use K5 to enable Edit Mode.';\nvar editAllowed = false;\n\nconst _knobRate = 500, _switchRate = 175;\nvar kProcessCount, sProcessCount; \n\nvar kRepsCount, workingRepsCount; // Rep# knob\n\nconst _outTrack1 = 0;\nconst _outTrack2 = 1;\nconst _outEOC = 5;\n\nconst _inClock = 0;\nconst _inReset = 1;\n\nconst _inputFloor = 4.5;\nconst _inputCeiling = 7.0;\n\nvar clockIsHigh = false;\nvar resetIsHigh = false;\n\nconst _triggerValue = 10.0;\n\nvar playpositionTrack1, playpositionTrack2;\n\nvar t=true, f=false; // in the playback of the Patterns, t issues a trigger, f does not.\n\nconst patternSet1=[ // TRACK 1\n      [t,f,f,f,f,f, f,f,f,f,f,f,' 0: o----- ------'], // for testing \n      [t,f,f,f,t,f, f,f,t,f,f,f,' 1: o---o- --o---'], // on the 1s (4/4) *\n      [t,f,f,t,f,f, t,f,f,t,f,f,' 5: o--o-- o--o--'], // on the 1s (3/4) *\n      [f,t,f,f,f,t, f,f,f,t,f,f,' 2: -o---o ---o--'], // on the 2s (4/4)\n      [t,f,t,f,t,f, t,f,t,f,t,f,' 3: o-o-o- o-o-o-'], // on the 1s & 3s (4/4) \n      [f,t,f,t,f,t, f,t,f,t,f,t,' 4: -o-o-o -o-o-o'], // on the 2s & 4s (4/4)\n      [t,f,t,f,t,t, f,t,f,t,f,t,' 6: o-o-oo -o-o-o'], // std. bell pattern\n      [t,f,t,f,t,t, f,t,t,f,t,f,' 7: o-o-oo -oo-o-'], // bell pattern\n      [t,t,f,t,t,f, t,f,t,t,f,t,' 8: oo-oo- o-oo-o'], // bell pattern\n      [f,t,t,f,t,f, f,t,f,t,t,t,' 9: -oo-o- -o-ooo'], // reverse of Reich pattern\n      [t,t,t,f,t,f, f,t,f,t,t,f,'10: ooo-o- -o-oo-'], // Reich pattern *\n      [t,f,t,f,t,f, t,t,f,t,f,t,'11: o-o-o- oo-o-o']  // flipped std. bell\n  ];\nconst patternSet2=[ // TRACK 2\n      [t,f,f,f,f,f, f,f,f,f,f,t,' 0: o----- -----o'], // for testing \n      [t,f,f,f,t,f, f,f,t,f,f,f,' 1: o---o- --o---'], // on the 1s (4/4) *\n      [t,f,f,t,f,f, t,f,f,t,f,f,' 2: o--o-- o--o--'], // on the 1s (3/4) *\n      [t,f,t,f,f,f, t,f,t,f,f,t,' 3: o-o--- o-o--o'], \n      [f,f,t,t,f,f, f,t,f,f,t,t,' 4: --oo-- -o--oo'], \n      [f,t,t,f,t,f, t,f,f,f,t,f,' 5: -oo-o- o---o-'], // primes'], \n      [t,f,t,f,t,t, f,t,f,t,f,f,' 6: o-o-oo -o-o--'], // inverse of standard bell\n      [t,f,t,f,t,f, t,t,f,t,f,t,' 7: o-o-o- oo-o-o'], // reverse of standard bell\n      [t,f,t,f,t,f, f,t,f,t,f,f,' 8: o-o-o- -o-o--'], // divisive rhythm pattern\n      [t,t,f,f,t,f, t,f,f,t,t,f,' 9: oo--o- o--oo-'], \n      [t,t,t,f,t,f, f,t,f,t,t,f,'10: ooo-o- -o-oo-'], // Reich pattern *\n      [t,f,f,t,f,t, t,f,f,t,f,f,'11: o--o-o o--o--']  // 3/4 feel']  \n  ];\nconst _patternCount = 12;\nconst livePattern=[]; // holds references to the two selected patterns\n\nconst _repsCount = 8;\nconst _modeCount = 4\nconst _segmentsCount = 4;\n\nconst _seqLength = 11; // zero-based\n\nvar segmentColors=[[0.0,0.0,0.6],[0.0,0.6,0.6],[0.6,0.6,0.0],[0.6,0.1,0.4]];\n\nconst displayLines = [];\nconst _l1 = 0, _l2 = 1, _l3 = 2;\n\n// ******\n// FUNCTIONS\n// ******\n\nfunction setDisplayLine(l,txt) {\n  displayLines[l] = txt;\n}\n\nfunction buildDisplayLine(l) {\n  let txt = '';\n  switch (l) {\n    case 1:\n      setDisplayLine(0,'Mode: '+modeText[kModeF-1]+' Reps('+kRepsF+')');\n      break;\n    case 2:\n      txt = 'Seg.: ';\n      for (let x=1;x<5;x++) {\n        if (kSegmentF == x) txt += 'oooooo'; else\n          txt += '......';\n        if (x==2) txt += ' ';\n      }\n      setDisplayLine(1,txt);\n      break;\n    case 3:\n      setDisplayLine(2,'');\n      break;\n    default:\n      for (let l=1;l<4;l++) {setDisplayLine(l,'')};\n }\n}\n  \nfunction updateDisplay(reset) {\n  if (reset) {\n    for (let l=0;l<3;l++) {buildDisplayLine(l)}\n  }\n  let txt = displayLines.join('\\n');\n  display(txt);\n}\n\n// -*-*-*\n// Change an indicator light\n// -*-*-*\nfunction setIndicatorLight(sw,r,g,b) {\n  block.lights[sw][0] = r;\n  block.lights[sw][1] = g;\n  block.lights[sw][2] = b;\n}\n\n// -*-*-*\n// Advances play positions and returns true if trk 1 is back to start of sequence \n// -*-*-*\nfunction advancePlayPositions() {\n  if (++playpositionTrack2 > _seqLength)\n    playpositionTrack2 = 0;\n  if (++playpositionTrack1 > _seqLength) {\n    playpositionTrack1 = 0;\n  }\n}\n\n// -*-*-*\n// EOC is when playpositionTrack1 is at the end of the sequence AND \n// the end of the requested # of repeats. The EOC trigger is sent \n// after the last step of the cycle is processed and BEFORE the first\n// step of the new cycle. THIS IS ALSO WHERE TRACK 2 GETS SHIFTED AHEAD.\n// -*-*-*\nfunction handleEOC() {\n  if (playpositionTrack1 == _seqLength) { \n    if (kRepsCount == workingRepsCount) { // EOC\n      if (++playpositionTrack2 > _seqLength) // EOC advance for Track 2\n        playpositionTrack2 = 0;\n      block.outputs[_outEOC][0] = _triggerValue;\n      kRepsCount = 1;\n      if (workingRepsCount != kRepsF) {\n        workingRepsCount = kRepsF;\n        resetVariables(); // they changed the reps count\n      }\n    } else\n    ++kRepsCount;\n  }\n}\n\n// -*-*-*\n// Initialize variables and GUI\n// -*-*-*\nfunction guiInit() {\n  \n  kTrk1PatternA  = block.knobs[_kTrk1Pattern];\n  kTrk1PatternLA = 0.5;\n  kTrk1PatternF  = 1;\n  kTrk1PatternLF = 1;\n   \n  kTrk2PatternA  = block.knobs[_kTrk2Pattern];\n  kTrk2PatternLA = 0.5;\n  kTrk2PatternF  = 1;\n  kTrk2PatternLF = 1;\n\n  kSegmentA  = block.knobs[_kSegment];\n  kSegmentLA = 0;\n  kSegmentF  = 1;\n  kSegmentLF = 1;\n\n  kRepsA  = block.knobs[_kReps];\n  kRepsLA = 0.00;\n  kRepsLF = 0;\n  kRepsF = Math.trunc((kRepsA) * 8) + 1;\n  kRepsF = (kRepsF>8) ? 8 : kRepsF;\n  workingRepsCount = kRepsF;\n\n  kModeA  = block.knobs[_kMode]; \n  kModeLA = 0.625;\n  kModeF  = 3;\n  kModeLF = 3;\n  \n  setIndicatorLight(_seg1,1.0,1.0,0.0); // segment 1 displayed\n  \n  block.knobs[2] = 0.0; // not used\n  \n  resetVariables();\n  kProcessCount = 500; // force immediate sync with actual values of knobs \n  \n  updateDisplay(true);\n  \n  initialized = true;\n} // end of guiInit()\n\nfunction loadPattern(t,p) {\n  livePattern[t] = (t==_trk1) ? patternSet1[p] : patternSet2[p];\n  setDisplayLine(_l3,livePattern[t][12]); updateDisplay(false);\n  if (t==_trk1 && kSegmentF > 2) return;\n  if (t==_trk2 && kSegmentF < 3) return;\n  let offset = (!(kSegmentF & 1)) ? 6 : 0;\n  for (let x=0;x<6;x++) {\n    if (livePattern[t][x+offset]) {\n      for (let c=0;c<3;c++) {\n        block.switchLights[x][c] = segmentColors[(kSegmentF-1)][c];\n      }\n    } else {\n      for (let c=0;c<3;c++) {\n        block.switchLights[x][c] = 0.0;\n      }\n    }\n  }\n}\n// -*-*-*\n// Initialize variables and GUI\n// -*-*-*\nfunction resetVariables() {\n  kRepsCount = 1;\n  playpositionTrack1 = -1;\n  playpositionTrack2 = -1;\n  kProcessCount = 0; \n  sProcessCount = 0; \n  clockIsHigh = false;  \n  resetIsHigh = false;\n}\n\n// ============================================================\n// PROTOTYPE MAIN PROCESS\n// ============================================================\nfunction process(block) {\n  if (!initialized) guiInit();\n  \n// \n// process clock and reset pulses every cycle\n// \n  processInputs: {\n    // ------\n    // Process Reset signal\n    // ------\n    let RESET = block.inputs[_inReset];\n    if (resetIsHigh) {\n      if (RESET < _inputCeiling) \n        resetVariables(); // will set resetIsHigh to false\n    }\n    else { // reset was not high\n      if (RESET > _inputFloor)\n        resetIsHigh = true;\n    }\n    // ------\n    // Process Clock pulse\n    // ------\n    let CLOCK = block.inputs[_inClock];\n    if ((kModeF > 2) && !clockIsHigh && (CLOCK > _inputFloor)) {\n      clockIsHigh = true; // clock pulse turned high\n      \n      advancePlayPositions();\n      \n      sendOutputs: {\n        // Track 1\n        let out = (livePattern[_trk1][playpositionTrack1]) ? _triggerValue : 0;\n        block.outputs[_outTrack1][0] = out;\n        if (out==_triggerValue) \n          setIndicatorLight(_outTrack1,0.0,1.0,1.0);\n        else\n          setIndicatorLight(_outTrack1,0.0,0.0,0.0);\n        // Track 2\n        out = (livePattern[_trk2][playpositionTrack2]) ? _triggerValue : 0;\n        block.outputs[_outTrack2][0] = out;\n        if (out==_triggerValue) \n          setIndicatorLight(_outTrack2,0.0,1.0,1.0);\n        else\n          setIndicatorLight(_outTrack2,0.0,0.0,0.0);\n      }\n      handleEOC(); // will send EOC trigger and bump playpositionTrack2\n    } \n    else   \n    if (clockIsHigh && CLOCK < _inputCeiling) {\n      clockIsHigh = false; // clock pulse turned low\n      block.outputs[_outTrack1][0] = 0;\n      block.outputs[_outTrack2][0] = 0;\n      block.outputs[_outEOC][0] = 0;\n      setIndicatorLight(_outTrack1,0.0,0.0,0.0);\n      setIndicatorLight(_outTrack2,0.0,0.0,0.0);\n    }\n    // ------\n    // process switch clicks once every _switchRate cycles\n    // ------\n    checkSwitches: if (++sProcessCount > _switchRate) {\n      sProcessCount = 0;\n      for (let s=0;s<6;s++) {\n        let trk, offset;\n        if (block.switches[s]) { // they're pressing this switch\n          if (!editAllowed) {\n            setDisplayLine(2,_editDisabledMsg);\n            updateDisplay(false);\n            break checkSwitches;\n          }\n          if (kSegmentA <= 0.15) {\n            trk = 0; offset=0;\n          } else \n          if (kSegmentA <= 0.3) {\n            trk = 0; offset=6;\n          } else \n          if (kSegmentA <= 0.45) {\n            trk = 1; offset=0;\n          } else {\n            trk = 1; offset=6;\n          }\n          offset += s;\n          livePattern[trk][offset] = !livePattern[trk][offset]; // toggle it\n          if (livePattern[trk][offset]) {\n            for (let c=0;c<3;c++) {\n              block.switchLights[s][c] = segmentColors[kSegmentF-1][c]; // turn it on\n            }\n          } else\n          for (let c=0;c<3;c++) {\n            block.switchLights[s][c] = 0; // turn ot off\n          }\n          sProcessCount -=200; // slow down the next process \n          break checkSwitches; // only one switch pressed at a time\n        }\n      }\n    }\n    // ------\n    // process knob changes once every _knobRate cycles\n    // ------\n    if (++kProcessCount > _knobRate) { \n      kProcessCount = 0;\n\n      kTrk1PatternA = block.knobs[_kTrk1Pattern];\n      if (kTrk1PatternA != kTrk1PatternLA) {\n        kTrk1PatternLA = kTrk1PatternA;\n        kTrk1PatternF = Math.trunc((kTrk1PatternA) * _patternCount) + 1;\n        kTrk1PatternF = (kTrk1PatternF>_patternCount) ? _patternCount : kTrk1PatternF;\n        if (kTrk1PatternF != kTrk1PatternLF) {\n          loadPattern(_trk1,(kTrk1PatternF-1));\n          kTrk1PatternLF = kTrk1PatternF;\n        }\n      }\n\n      kTrk2PatternA = block.knobs[_kTrk2Pattern];\n      if (kTrk2PatternA != kTrk2PatternLA) {\n        kTrk2PatternLA = kTrk2PatternA;\n        kTrk2PatternF = Math.trunc((kTrk2PatternA) * _patternCount) + 1;\n        kTrk2PatternF = (kTrk2PatternF>_patternCount) ? _patternCount : kTrk2PatternF;\n        if (kTrk2PatternF != kTrk2PatternLF) {\n          loadPattern(_trk2,(kTrk2PatternF-1));\n          kTrk2PatternLF = kTrk2PatternF;\n        }\n      }\n\n      kModeA = block.knobs[_kMode];\n      if (kModeA != kModeLA) {\n         kModeLA = kModeA;\n        kModeF = Math.trunc((kModeA) * _modeCount) + 1;\n        kModeF = (kModeF>4) ? _modeCount : kModeF;\n        editAllowed = (kModeF == 1 || kModeF == _modeCount);\n        if (kModeF != kModeLF) {\n          updateDisplay(true);\n          kModeLF = kModeF;\n        }\n        let r, g, b;\n        for (let i=2;i<6;i++) {\n          r = 0.0; g = 0.0; b = 0.0;\n          if (i==2) {\n            if (kModeF < 3) r = 1.0; else g = 1.0;\n          } else\n          if (i==3) {\n            if (!editAllowed) {\n              g=0.0;r=0.8;b=0.3;\n            } else {\n              g=0.8;r=1.0;b=0.0;\n            }\n          }\n          setIndicatorLight(i,r,g,b);\n        }\n      }\n\n      kRepsA = block.knobs[_kReps];\n      if (kRepsA != kRepsLA) {\n         kRepsLA = kRepsA;\n        kRepsF = Math.trunc((kRepsA) * _repsCount) + 1;\n        kRepsF = (kRepsF>_repsCount) ? _repsCount : kRepsF;\n        if (kRepsF != kRepsLF) {\n          updateDisplay(true);\n          kRepsLF = kRepsF;\n        }\n      }\n\n      kSegmentA = block.knobs[_kSegment];\n      if (kSegmentA != kSegmentLA) {\n        kSegmentF = Math.trunc((kSegmentA) * 7) + 1;\n        kSegmentF = (kSegmentF>4) ? 4 : kSegmentF;\n        kSegmentLA = kSegmentA;\n\n        updateDisplay(true);\n\n        for (let x=2;x<6;x++) {\n          if (x-1<=kSegmentF) \n            setIndicatorLight(x,1.0,1.0,0.0);\n          else \n            setIndicatorLight(x,0.0,0.0,0.0);\n        }\n        let t = (kSegmentF < 3) ? _trk1 : _trk2;\n        let offset = (!(kSegmentF & 1)) ? 6 : 0;\n//console.log('Segment:'+kSegmentF+', track='+t+', offset='+offset); console.log(livePattern);\n        if (kSegmentF != kSegmentLF) {\n          for (let x=0;x<6;x++) {\n            if (livePattern[t][x+offset]) {\n              for (let c=0;c<3;c++) {\n                block.switchLights[x][c] = segmentColors[(kSegmentF-1)][c];\n              }\n            } else {\n              for (let c=0;c<3;c++) {\n                block.switchLights[x][c] = 0.0;\n              }\n            }\n          }\n          kSegmentLF = kSegmentF;\n        }\n      }\n    }\n  }\n}"
      },
      "pos": [
        15,
        2
      ]
    },
    {
      "id": 841,
      "plugin": "AudibleInstruments",
      "version": "1.3.1",
      "model": "Plaits",
      "params": [
        {
          "id": 0,
          "value": 0.0
        },
        {
          "id": 1,
          "value": 0.0
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.783499956
        },
        {
          "id": 4,
          "value": 0.695000052
        },
        {
          "id": 5,
          "value": 0.576500118
        },
        {
          "id": 6,
          "value": 0.0
        },
        {
          "id": 7,
          "value": -0.113999978
        },
        {
          "id": 8,
          "value": 0.0
        },
        {
          "id": 9,
          "value": 0.5
        },
        {
          "id": 10,
          "value": 0.5
        }
      ],
      "leftModuleId": 842,
      "rightModuleId": 843,
      "data": {
        "lowCpu": false,
        "model": 11
      },
      "pos": [
        44,
        2
      ]
    },
    {
      "id": 842,
      "plugin": "AudibleInstruments",
      "version": "1.3.1",
      "model": "Plaits",
      "params": [
        {
          "id": 0,
          "value": 0.0
        },
        {
          "id": 1,
          "value": 0.0
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.790999889
        },
        {
          "id": 4,
          "value": 0.69200021
        },
        {
          "id": 5,
          "value": 0.574500799
        },
        {
          "id": 6,
          "value": 0.0
        },
        {
          "id": 7,
          "value": 0.138000026
        },
        {
          "id": 8,
          "value": 0.0
        },
        {
          "id": 9,
          "value": 0.5
        },
        {
          "id": 10,
          "value": 0.5
        }
      ],
      "leftModuleId": 867,
      "rightModuleId": 841,
      "data": {
        "lowCpu": false,
        "model": 11
      },
      "pos": [
        32,
        2
      ]
    },
    {
      "id": 843,
      "plugin": "Grayscale",
      "version": "1.0.1",
      "model": "Binary2",
      "params": [
        {
          "id": 0,
          "value": 0.0
        },
        {
          "id": 1,
          "value": 0.0
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.0
        },
        {
          "id": 4,
          "value": 0.0
        },
        {
          "id": 5,
          "value": 0.0
        }
      ],
      "leftModuleId": 841,
      "rightModuleId": 869,
      "data": {
        "states": [
          1,
          1,
          1,
          0,
          1,
          1
        ]
      },
      "pos": [
        56,
        2
      ]
    },
    {
      "id": 846,
      "plugin": "HetrickCV",
      "version": "1.0.0",
      "model": "Boolean3",
      "params": [],
      "leftModuleId": 870,
      "rightModuleId": 847,
      "pos": [
        68,
        2
      ]
    },
    {
      "id": 847,
      "plugin": "Bogaudio",
      "version": "1.1.33",
      "model": "Bogaudio-FMOp",
      "params": [
        {
          "id": 0,
          "value": -0.750000358
        },
        {
          "id": 1,
          "value": 0.237000152
        },
        {
          "id": 2,
          "value": 0.256500006
        },
        {
          "id": 3,
          "value": 0.305729926
        },
        {
          "id": 4,
          "value": 0.518500209
        },
        {
          "id": 5,
          "value": 0.767729998
        },
        {
          "id": 6,
          "value": 0.091499947
        },
        {
          "id": 7,
          "value": 0.0750000775
        },
        {
          "id": 8,
          "value": 1.0
        },
        {
          "id": 9,
          "value": 1.0
        },
        {
          "id": 10,
          "value": 0.0
        },
        {
          "id": 11,
          "value": 0.0
        }
      ],
      "leftModuleId": 846,
      "data": {
        "linearLevel": false
      },
      "pos": [
        74,
        2
      ]
    },
    {
      "id": 849,
      "plugin": "ML_modules",
      "version": "1.1.2",
      "model": "Quantum",
      "params": [
        {
          "id": 0,
          "value": 0.0
        },
        {
          "id": 1,
          "value": 0.0
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.0
        },
        {
          "id": 4,
          "value": 0.0
        },
        {
          "id": 5,
          "value": 0.0
        },
        {
          "id": 6,
          "value": 0.0
        },
        {
          "id": 7,
          "value": 0.0
        },
        {
          "id": 8,
          "value": 0.0
        },
        {
          "id": 9,
          "value": 0.0
        },
        {
          "id": 10,
          "value": 0.0
        },
        {
          "id": 11,
          "value": 0.0
        }
      ],
      "leftModuleId": 852,
      "data": {
        "scale": [
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          1,
          0,
          0,
          1,
          0
        ],
        "mode": 1,
        "transpose_select": 1,
        "toggle_mode": 0
      },
      "pos": [
        49,
        3
      ]
    },
    {
      "id": 851,
      "plugin": "Bogaudio",
      "version": "1.1.33",
      "model": "Bogaudio-LLFO",
      "params": [
        {
          "id": 0,
          "value": 3.47100115
        },
        {
          "id": 1,
          "value": 0.0
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.0150000006
        },
        {
          "id": 4,
          "value": 0.075000003
        }
      ],
      "leftModuleId": 855,
      "rightModuleId": 852,
      "pos": [
        43,
        3
      ]
    },
    {
      "id": 852,
      "plugin": "Bogaudio",
      "version": "1.1.33",
      "model": "Bogaudio-SampleHold",
      "params": [
        {
          "id": 0,
          "value": 0.0
        },
        {
          "id": 1,
          "value": 0.0
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.0
        },
        {
          "id": 4,
          "value": 0.0
        },
        {
          "id": 5,
          "value": 0.0
        }
      ],
      "leftModuleId": 851,
      "rightModuleId": 849,
      "data": {
        "poly_input": 0,
        "noise_type": 0,
        "range_offset": 1.0,
        "range_scale": 5.0
      },
      "pos": [
        46,
        3
      ]
    },
    {
      "id": 853,
      "plugin": "Bogaudio",
      "version": "1.1.33",
      "model": "Bogaudio-LLFO",
      "params": [
        {
          "id": 0,
          "value": 1.950001
        },
        {
          "id": 1,
          "value": 0.0
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.0150000006
        },
        {
          "id": 4,
          "value": 0.075000003
        }
      ],
      "leftModuleId": 837,
      "rightModuleId": 854,
      "pos": [
        29,
        3
      ]
    },
    {
      "id": 854,
      "plugin": "Bogaudio",
      "version": "1.1.33",
      "model": "Bogaudio-SampleHold",
      "params": [
        {
          "id": 0,
          "value": 0.0
        },
        {
          "id": 1,
          "value": 0.0
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.0
        },
        {
          "id": 4,
          "value": 0.0
        },
        {
          "id": 5,
          "value": 0.0
        }
      ],
      "leftModuleId": 853,
      "rightModuleId": 855,
      "data": {
        "poly_input": 0,
        "noise_type": 0,
        "range_offset": 1.0,
        "range_scale": 5.0
      },
      "pos": [
        32,
        3
      ]
    },
    {
      "id": 855,
      "plugin": "ML_modules",
      "version": "1.1.2",
      "model": "Quantum",
      "params": [
        {
          "id": 0,
          "value": 0.0
        },
        {
          "id": 1,
          "value": 0.0
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.0
        },
        {
          "id": 4,
          "value": 0.0
        },
        {
          "id": 5,
          "value": 0.0
        },
        {
          "id": 6,
          "value": 0.0
        },
        {
          "id": 7,
          "value": 0.0
        },
        {
          "id": 8,
          "value": 0.0
        },
        {
          "id": 9,
          "value": 0.0
        },
        {
          "id": 10,
          "value": 0.0
        },
        {
          "id": 11,
          "value": 0.0
        }
      ],
      "leftModuleId": 854,
      "rightModuleId": 851,
      "data": {
        "scale": [
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          1,
          0,
          0,
          1,
          0
        ],
        "mode": 1,
        "transpose_select": 1,
        "toggle_mode": 0
      },
      "pos": [
        35,
        3
      ]
    },
    {
      "id": 856,
      "plugin": "Bogaudio",
      "version": "1.1.33",
      "model": "Bogaudio-LLFO",
      "params": [
        {
          "id": 0,
          "value": -2.3010006
        },
        {
          "id": 1,
          "value": 0.0
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": -8.14907253e-8
        },
        {
          "id": 4,
          "value": 0.181500137
        }
      ],
      "leftModuleId": 863,
      "rightModuleId": 858,
      "pos": [
        70,
        3
      ]
    },
    {
      "id": 858,
      "plugin": "Bogaudio",
      "version": "1.1.33",
      "model": "Bogaudio-SampleHold",
      "params": [
        {
          "id": 0,
          "value": 0.0
        },
        {
          "id": 1,
          "value": 0.0
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.0
        },
        {
          "id": 4,
          "value": 0.0
        },
        {
          "id": 5,
          "value": 0.0
        }
      ],
      "leftModuleId": 856,
      "rightModuleId": 859,
      "data": {
        "poly_input": 0,
        "noise_type": 0,
        "range_offset": 1.0,
        "range_scale": 5.0
      },
      "pos": [
        73,
        3
      ]
    },
    {
      "id": 859,
      "plugin": "ML_modules",
      "version": "1.1.2",
      "model": "Quantum",
      "params": [
        {
          "id": 0,
          "value": 0.0
        },
        {
          "id": 1,
          "value": 0.0
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.0
        },
        {
          "id": 4,
          "value": 0.0
        },
        {
          "id": 5,
          "value": 0.0
        },
        {
          "id": 6,
          "value": 0.0
        },
        {
          "id": 7,
          "value": 0.0
        },
        {
          "id": 8,
          "value": 0.0
        },
        {
          "id": 9,
          "value": 0.0
        },
        {
          "id": 10,
          "value": 0.0
        },
        {
          "id": 11,
          "value": 0.0
        }
      ],
      "leftModuleId": 858,
      "data": {
        "scale": [
          1,
          0,
          1,
          1,
          0,
          1,
          0,
          1,
          0,
          1,
          1,
          0
        ],
        "mode": 1,
        "transpose_select": 1,
        "toggle_mode": 0
      },
      "pos": [
        76,
        3
      ]
    },
    {
      "id": 860,
      "plugin": "Bogaudio",
      "version": "1.1.33",
      "model": "Bogaudio-EightFO",
      "params": [
        {
          "id": 0,
          "value": -4.11450148
        },
        {
          "id": 1,
          "value": 3.0
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.0
        },
        {
          "id": 4,
          "value": 0.0
        },
        {
          "id": 5,
          "value": 0.0
        },
        {
          "id": 6,
          "value": 0.0
        },
        {
          "id": 7,
          "value": 0.0
        },
        {
          "id": 8,
          "value": 0.0
        },
        {
          "id": 9,
          "value": 0.0
        },
        {
          "id": 10,
          "value": 0.0
        },
        {
          "id": 11,
          "value": 0.0
        },
        {
          "id": 12,
          "value": 0.0
        },
        {
          "id": 13,
          "value": 1.0
        }
      ],
      "rightModuleId": 79,
      "pos": [
        0,
        0
      ]
    },
    {
      "id": 861,
      "plugin": "VultModulesFree",
      "version": "1.11",
      "model": "Basal",
      "params": [
        {
          "id": 0,
          "value": 0.0
        },
        {
          "id": 1,
          "value": -0.290999889
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.0
        },
        {
          "id": 4,
          "value": 0.00150000001
        },
        {
          "id": 5,
          "value": 0.0
        }
      ],
      "rightModuleId": 862,
      "pos": [
        58,
        3
      ]
    },
    {
      "id": 862,
      "plugin": "Bogaudio",
      "version": "1.1.33",
      "model": "Bogaudio-ADSR",
      "params": [
        {
          "id": 0,
          "value": 0.177000001
        },
        {
          "id": 1,
          "value": 0.316229999
        },
        {
          "id": 2,
          "value": 0.0
        },
        {
          "id": 3,
          "value": 0.464730024
        },
        {
          "id": 4,
          "value": 0.0
        }
      ],
      "leftModuleId": 861,
      "rightModuleId": 863,
      "data": {
        "invert": 1.0
      },
      "pos": [
        64,
        3
      ]
    },
    {
      "id": 863,
      "plugin": "Fundamental",
      "version": "1.4.0",
      "model": "VCA-1",
      "params": [
        {
          "id": 0,
          "value": 0.653500199
        },
        {
          "id": 1,
          "value": 0.0
        }
      ],
      "leftModuleId": 862,
      "rightModuleId": 856,
      "pos": [
        67,
        3
      ]
    },
    {
      "id": 864,
      "plugin": "VCV-Recorder",
      "version": "1.0.1",
      "model": "Recorder",
      "params": [
        {
          "id": 0,
          "value": 0.0
        },
        {
          "id": 1,
          "value": 0.0
        }
      ],
      "leftModuleId": 601,
      "data": {
        "format": "wav",
        "path": "/Users/paulpomeroy/Local Documents/music production/recordings/that rhythm.wav",
        "incrementPath": true,
        "sampleRate": 48000,
        "depth": 16,
        "bitRate": 320000
      },
      "pos": [
        79,
        0
      ]
    },
    {
      "id": 867,
      "plugin": "AS",
      "version": "1.0.4",
      "model": "MonoVUmeter",
      "params": [],
      "leftModuleId": 840,
      "rightModuleId": 842,
      "pos": [
        30,
        2
      ]
    },
    {
      "id": 868,
      "plugin": "AS",
      "version": "1.0.4",
      "model": "MonoVUmeter",
      "params": [],
      "leftModuleId": 869,
      "rightModuleId": 870,
      "pos": [
        64,
        2
      ]
    },
    {
      "id": 869,
      "plugin": "AS",
      "version": "1.0.4",
      "model": "MonoVUmeter",
      "params": [],
      "leftModuleId": 843,
      "rightModuleId": 868,
      "pos": [
        62,
        2
      ]
    },
    {
      "id": 870,
      "plugin": "AS",
      "version": "1.0.4",
      "model": "MonoVUmeter",
      "params": [],
      "leftModuleId": 868,
      "rightModuleId": 846,
      "pos": [
        66,
        2
      ]
    },
    {
      "id": 871,
      "plugin": "Fundamental",
      "version": "1.4.0",
      "model": "Scope",
      "params": [
        {
          "id": 0,
          "value": -1.0
        },
        {
          "id": 1,
          "value": -10.0
        },
        {
          "id": 2,
          "value": -1.0
        },
        {
          "id": 3,
          "value": 0.900000095
        },
        {
          "id": 4,
          "value": 6.0
        },
        {
          "id": 5,
          "value": 0.0
        },
        {
          "id": 6,
          "value": 0.0
        },
        {
          "id": 7,
          "value": 0.0
        }
      ],
      "rightModuleId": 872,
      "data": {
        "lissajous": 0,
        "external": 0
      },
      "pos": [
        0,
        3
      ]
    },
    {
      "id": 872,
      "plugin": "AS",
      "version": "1.0.4",
      "model": "MonoVUmeter",
      "params": [],
      "leftModuleId": 871,
      "pos": [
        13,
        3
      ]
    }
  ],
  "cables": [
    {
      "id": 1130,
      "outputModuleId": 602,
      "outputId": 0,
      "inputModuleId": 698,
      "inputId": 0,
      "color": "#0c8e15"
    },
    {
      "id": 1131,
      "outputModuleId": 602,
      "outputId": 1,
      "inputModuleId": 698,
      "inputId": 1,
      "color": "#c91847"
    },
    {
      "id": 1128,
      "outputModuleId": 604,
      "outputId": 0,
      "inputModuleId": 698,
      "inputId": 2,
      "color": "#0c8e15"
    },
    {
      "id": 1129,
      "outputModuleId": 604,
      "outputId": 1,
      "inputModuleId": 698,
      "inputId": 3,
      "color": "#c91847"
    },
    {
      "id": 1126,
      "outputModuleId": 698,
      "outputId": 4,
      "inputModuleId": 602,
      "inputId": 1,
      "color": "#c91847"
    },
    {
      "id": 1124,
      "outputModuleId": 698,
      "outputId": 1,
      "inputModuleId": 604,
      "inputId": 5,
      "color": "#0c8e15"
    },
    {
      "id": 1127,
      "outputModuleId": 698,
      "outputId": 5,
      "inputModuleId": 604,
      "inputId": 6,
      "color": "#c91847"
    },
    {
      "id": 1122,
      "outputModuleId": 697,
      "outputId": 2,
      "inputModuleId": 599,
      "inputId": 0,
      "color": "#0c8e15"
    },
    {
      "id": 1125,
      "outputModuleId": 697,
      "outputId": 3,
      "inputModuleId": 599,
      "inputId": 1,
      "color": "#c91847"
    },
    {
      "id": 1123,
      "outputModuleId": 698,
      "outputId": 0,
      "inputModuleId": 602,
      "inputId": 0,
      "color": "#0c8e15"
    },
    {
      "id": 1551,
      "outputModuleId": 835,
      "outputId": 0,
      "inputModuleId": 697,
      "inputId": 2,
      "color": "#0c8e15"
    },
    {
      "id": 1550,
      "outputModuleId": 834,
      "outputId": 0,
      "inputModuleId": 697,
      "inputId": 0,
      "color": "#c9b70e"
    },
    {
      "id": 1559,
      "outputModuleId": 833,
      "outputId": 0,
      "inputModuleId": 697,
      "inputId": 4,
      "color": "#0c8e15"
    },
    {
      "id": 1558,
      "outputModuleId": 79,
      "outputId": 2,
      "inputModuleId": 833,
      "inputId": 0,
      "color": "#c9b70e"
    },
    {
      "id": 1563,
      "outputModuleId": 79,
      "outputId": 4,
      "inputModuleId": 831,
      "inputId": 1,
      "color": "#c91847"
    },
    {
      "id": 1557,
      "outputModuleId": 79,
      "outputId": 1,
      "inputModuleId": 831,
      "inputId": 0,
      "color": "#0986ad"
    },
    {
      "id": 1571,
      "outputModuleId": 839,
      "outputId": 0,
      "inputModuleId": 697,
      "inputId": 6,
      "color": "#0c8e15"
    },
    {
      "id": 1573,
      "outputModuleId": 841,
      "outputId": 0,
      "inputModuleId": 697,
      "inputId": 8,
      "color": "#0986ad"
    },
    {
      "id": 1572,
      "outputModuleId": 840,
      "outputId": 1,
      "inputModuleId": 841,
      "inputId": 5,
      "color": "#c91847"
    },
    {
      "id": 1575,
      "outputModuleId": 840,
      "outputId": 0,
      "inputModuleId": 842,
      "inputId": 5,
      "color": "#0c8e15"
    },
    {
      "id": 1577,
      "outputModuleId": 840,
      "outputId": 0,
      "inputModuleId": 843,
      "inputId": 0,
      "color": "#0986ad"
    },
    {
      "id": 1578,
      "outputModuleId": 840,
      "outputId": 1,
      "inputModuleId": 843,
      "inputId": 1,
      "color": "#c9b70e"
    },
    {
      "id": 1579,
      "outputModuleId": 840,
      "outputId": 0,
      "inputModuleId": 846,
      "inputId": 0,
      "color": "#0c8e15"
    },
    {
      "id": 1580,
      "outputModuleId": 840,
      "outputId": 1,
      "inputModuleId": 846,
      "inputId": 1,
      "color": "#c91847"
    },
    {
      "id": 1584,
      "outputModuleId": 851,
      "outputId": 0,
      "inputModuleId": 852,
      "inputId": 1,
      "color": "#c91847"
    },
    {
      "id": 1585,
      "outputModuleId": 852,
      "outputId": 0,
      "inputModuleId": 849,
      "inputId": 0,
      "color": "#0986ad"
    },
    {
      "id": 1583,
      "outputModuleId": 840,
      "outputId": 5,
      "inputModuleId": 852,
      "inputId": 0,
      "color": "#0c8e15"
    },
    {
      "id": 1586,
      "outputModuleId": 849,
      "outputId": 0,
      "inputModuleId": 841,
      "inputId": 7,
      "color": "#c9b70e"
    },
    {
      "id": 1587,
      "outputModuleId": 853,
      "outputId": 0,
      "inputModuleId": 854,
      "inputId": 3,
      "color": "#0c8e15"
    },
    {
      "id": 1589,
      "outputModuleId": 854,
      "outputId": 1,
      "inputModuleId": 855,
      "inputId": 0,
      "color": "#0986ad"
    },
    {
      "id": 1590,
      "outputModuleId": 855,
      "outputId": 0,
      "inputModuleId": 842,
      "inputId": 7,
      "color": "#c9b70e"
    },
    {
      "id": 1588,
      "outputModuleId": 840,
      "outputId": 5,
      "inputModuleId": 854,
      "inputId": 2,
      "color": "#c91847"
    },
    {
      "id": 1593,
      "outputModuleId": 858,
      "outputId": 1,
      "inputModuleId": 859,
      "inputId": 0,
      "color": "#0986ad"
    },
    {
      "id": 1594,
      "outputModuleId": 856,
      "outputId": 0,
      "inputModuleId": 858,
      "inputId": 3,
      "color": "#c9b70e"
    },
    {
      "id": 1597,
      "outputModuleId": 859,
      "outputId": 0,
      "inputModuleId": 847,
      "inputId": 4,
      "color": "#0986ad"
    },
    {
      "id": 1599,
      "outputModuleId": 843,
      "outputId": 0,
      "inputModuleId": 846,
      "inputId": 2,
      "color": "#0c8e15"
    },
    {
      "id": 1595,
      "outputModuleId": 846,
      "outputId": 1,
      "inputModuleId": 858,
      "inputId": 2,
      "color": "#0c8e15"
    },
    {
      "id": 1601,
      "outputModuleId": 79,
      "outputId": 4,
      "inputModuleId": 840,
      "inputId": 1,
      "color": "#0986ad"
    },
    {
      "id": 1574,
      "outputModuleId": 79,
      "outputId": 3,
      "inputModuleId": 840,
      "inputId": 0,
      "color": "#c9b70e"
    },
    {
      "id": 1602,
      "outputModuleId": 860,
      "outputId": 0,
      "inputModuleId": 697,
      "inputId": 26,
      "color": "#c9b70e"
    },
    {
      "id": 1603,
      "outputModuleId": 860,
      "outputId": 2,
      "inputModuleId": 697,
      "inputId": 27,
      "color": "#0c8e15"
    },
    {
      "id": 1605,
      "outputModuleId": 840,
      "outputId": 1,
      "inputModuleId": 834,
      "inputId": 0,
      "color": "#0986ad"
    },
    {
      "id": 1604,
      "outputModuleId": 840,
      "outputId": 0,
      "inputModuleId": 835,
      "inputId": 0,
      "color": "#c91847"
    },
    {
      "id": 1607,
      "outputModuleId": 79,
      "outputId": 3,
      "inputModuleId": 604,
      "inputId": 7,
      "color": "#0c8e15"
    },
    {
      "id": 1608,
      "outputModuleId": 847,
      "outputId": 0,
      "inputModuleId": 842,
      "inputId": 2,
      "color": "#c91847"
    },
    {
      "id": 1609,
      "outputModuleId": 847,
      "outputId": 0,
      "inputModuleId": 841,
      "inputId": 2,
      "color": "#0986ad"
    },
    {
      "id": 1566,
      "outputModuleId": 840,
      "outputId": 0,
      "inputModuleId": 837,
      "inputId": 0,
      "color": "#0c8e15"
    },
    {
      "id": 1606,
      "outputModuleId": 840,
      "outputId": 5,
      "inputModuleId": 839,
      "inputId": 0,
      "color": "#c9b70e"
    },
    {
      "id": 1610,
      "outputModuleId": 831,
      "outputId": 1,
      "inputModuleId": 843,
      "inputId": 2,
      "color": "#c9b70e"
    },
    {
      "id": 1612,
      "outputModuleId": 843,
      "outputId": 1,
      "inputModuleId": 862,
      "inputId": 0,
      "color": "#0986ad"
    },
    {
      "id": 1613,
      "outputModuleId": 862,
      "outputId": 0,
      "inputModuleId": 863,
      "inputId": 0,
      "color": "#c9b70e"
    },
    {
      "id": 1614,
      "outputModuleId": 861,
      "outputId": 0,
      "inputModuleId": 863,
      "inputId": 1,
      "color": "#0c8e15"
    },
    {
      "id": 1615,
      "outputModuleId": 863,
      "outputId": 0,
      "inputModuleId": 697,
      "inputId": 12,
      "color": "#c91847"
    },
    {
      "id": 1616,
      "outputModuleId": 859,
      "outputId": 0,
      "inputModuleId": 861,
      "inputId": 0,
      "color": "#0986ad"
    },
    {
      "id": 1617,
      "outputModuleId": 697,
      "outputId": 2,
      "inputModuleId": 864,
      "inputId": 2,
      "color": "#c9b70e"
    },
    {
      "id": 1618,
      "outputModuleId": 697,
      "outputId": 3,
      "inputModuleId": 864,
      "inputId": 3,
      "color": "#0c8e15"
    },
    {
      "id": 1576,
      "outputModuleId": 842,
      "outputId": 0,
      "inputModuleId": 697,
      "inputId": 9,
      "color": "#c91847"
    },
    {
      "id": 1582,
      "outputModuleId": 847,
      "outputId": 0,
      "inputModuleId": 697,
      "inputId": 10,
      "color": "#c9b70e"
    },
    {
      "id": 1581,
      "outputModuleId": 843,
      "outputId": 1,
      "inputModuleId": 847,
      "inputId": 5,
      "color": "#0986ad"
    },
    {
      "id": 1619,
      "outputModuleId": 860,
      "outputId": 5,
      "inputModuleId": 697,
      "inputId": 31,
      "color": "#c91847"
    },
    {
      "id": 1620,
      "outputModuleId": 840,
      "outputId": 5,
      "inputModuleId": 867,
      "inputId": 0,
      "color": "#0986ad"
    },
    {
      "id": 1623,
      "outputModuleId": 846,
      "outputId": 4,
      "inputModuleId": 868,
      "inputId": 0,
      "color": "#0986ad"
    },
    {
      "id": 1624,
      "outputModuleId": 843,
      "outputId": 0,
      "inputModuleId": 869,
      "inputId": 0,
      "color": "#0c8e15"
    },
    {
      "id": 1625,
      "outputModuleId": 843,
      "outputId": 1,
      "inputModuleId": 870,
      "inputId": 0,
      "color": "#c91847"
    },
    {
      "id": 1626,
      "outputModuleId": 831,
      "outputId": 5,
      "inputModuleId": 872,
      "inputId": 0,
      "color": "#c91847"
    },
    {
      "id": 1627,
      "outputModuleId": 831,
      "outputId": 0,
      "inputModuleId": 871,
      "inputId": 0,
      "color": "#0986ad"
    },
    {
      "id": 1628,
      "outputModuleId": 831,
      "outputId": 1,
      "inputModuleId": 871,
      "inputId": 1,
      "color": "#c91847"
    },
    {
      "id": 1629,
      "outputModuleId": 840,
      "outputId": 1,
      "inputModuleId": 837,
      "inputId": 1,
      "color": "#c91847"
    },
    {
      "id": 1611,
      "outputModuleId": 831,
      "outputId": 0,
      "inputModuleId": 843,
      "inputId": 3,
      "color": "#0c8e15"
    }
  ]
}